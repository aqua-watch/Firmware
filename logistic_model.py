# -*- coding: utf-8 -*-
"""
Created on Mon Oct  8 14:34:21 2018

@author: Armin
"""
import json

from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.datasets.samples_generator import make_blobs
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np


def formatModel():
    #take our json object and convert to tabular format
    model = {}  
    with open('model_0.json') as f:
        model = f.read().replace('\n', '')
        model = json.loads(model)
    model_df = pd.DataFrame([], columns = ['Cond','PH', 'ORP', 'TDS', 'Turb', 'Desc', 'Timestamp', 'Contaminated'])  
    experiments =  model["Exps"]
    ix = 0 #index of df
    for exp in experiments:
        insert = []
        desc = exp["desc"]
        ts = exp["timeStamp"]
        contaminated = exp["contaminated"]
        
        for result in exp["results"]:
            insert = []
            insert.append(result["Conductivity"])
            insert.append(result["PH"])
            insert.append(result["ORP"])
            insert.append(result["Turp"])
            insert.append(result["TDS"])
            insert.append(desc)
            insert.append(ts)
            insert.append(contaminated)
            
            model_df.loc[ix] = (insert)
            ix += 1
            
    
    return model_df

def build_model(model_df):
    #split data
    X = []
    y = []
    for idx, row in model_df.iterrows():
        X.append([row["Cond"], row["PH"],row["ORP"],row["TDS"], row["Turb"]])
        y.append(row["Contaminated"])
        
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
    
    clf = LogisticRegression(random_state = 0, solver='lbfgs',
                          multi_class='multinomial').fit(X_train, y_train)
    
    #print(clf.score(X_test, y_test))
    
    x = [[-0.9509875174560779,
  -0.8937926814792972,
  -0.30817257166895073,
  0.4115763048309322,
  1.7413764657733937],
 [-0.9509875174560779,
  -0.8937926814792972,
  -0.30817257166895073,
  0.4115763048309322,
  1.7413764657733937],
 [-0.9401969638851244,
  -0.8838035404733874,
  -0.3394738870270493,
  0.418650576206275,
  1.744823815179286],
 [-1.0568471284723702,
  -0.9989944162195583,
  0.06796670834113916,
  0.3213894096805425,
  1.6664854266702462],
 [-1.0715473326776839,
  -1.0134531649282,
  0.13306914429931038,
  0.3044101706996873,
  1.6475211826068863],
 [-1.0781624264460428,
  -1.0207170054047945,
  0.1656451771501906,
  0.295958156415636,
  1.6372760982850112],
 [-1.1507879334212932,
  -1.0968879320284135,
  0.7229623982861383,
  0.13487215645986017,
  1.3898413107037082],
 [-1.1356098622925437,
  -1.0792828294423764,
  0.526788107225084,
  0.19475091357956817,
  1.4933536709302675],
 [-1.1015575082330198,
  -1.0442733416530925,
  0.28768481168131577,
  0.26313445457563256,
  1.595011583629164],
 [-1.13852129559485,
  -1.0827584639325758,
  0.5560710471348532,
  0.186180218774239,
  1.4790284936183338],
 [-1.1256998956485835,
  -1.0685253414616256,
  0.443086824403063,
  0.21925962414322564,
  1.5318787885639205],
 [-1.0954888129309233,
  -1.038893916653769,
  0.255886881101612,
  0.2718828560895595,
  1.6066129923935202],
 [-1.1408930808415811,
  -1.0861659148034075,
  0.5849308404451996,
  0.17756968894789343,
  1.464558466251895],
 [-1.0172111781551438,
  -0.9592171025579168,
  -0.0891423745921835,
  0.36049575454456895,
  1.7050749007606756],
 [-0.9692517610059365,
  -0.9124796531322374,
  -0.250788146913316,
  0.39872050353871724,
  1.733799057512773],
 [-1.0780613997190835,
  -1.020952047531755,
  0.16578029092093058,
  0.29607119869687853,
  1.6371619576330292],
 [-1.0343161806565135,
  -0.9766767766208778,
  -0.023743504503315877,
  0.3444445636049989,
  1.690291898175708],
 [-0.9589023186485791,
  -0.9024934394137116,
  -0.2827251929926893,
  0.4059332076663177,
  1.7381877433886619],
 [-1.0487311415199483,
  -0.9916761596566834,
  0.03531351388208381,
  0.32975651210613494,
  1.6753372751884126],
 [-1.040938684629246,
  -0.9832952618353352,
  0.00245639585769516,
  0.3379181901569181,
  1.6838593604499685],
 [-0.9400461178964968,
  -0.8838921708981994,
  -0.3395377450397049,
  0.41862122039564004,
  1.7448548134387607],
 [-1.063917975337577,
  -1.0069264578600727,
  0.10068773977302493,
  0.31303633502277795,
  1.6571203584018466],
 [-1.0912677268668676,
  -1.033354827614519,
  0.23015497152309766,
  0.2787139614860922,
  1.6157536214721966],
 [-0.9694660347632865,
  -0.9121194447989056,
  -0.2509278834532095,
  0.3986481504634406,
  1.733865212551961],
 [-1.153368486881143,
  -1.1004816624973532,
  0.7955560656595652,
  0.11170839184473784,
  1.3465856918741934],
 [-1.1479617289693353,
  -1.0929360000348196,
  0.6689677749651753,
  0.15166418303241297,
  1.4202657710065663],
 [-1.1014220294013144,
  -1.0443778810382947,
  0.287651600410113,
  0.2630999286004611,
  1.5950483814290353],
 [-1.135363715594691,
  -1.0795963409157805,
  0.5268358104227497,
  0.1948382526671396,
  1.4932859934205822],
 [-1.1439744449416958,
  -1.0881677718311398,
  0.6133122197937763,
  0.16880739193134406,
  1.4500226050477147],
 [-1.1016272003923961,
  -1.0441790410286067,
  0.28766213733896395,
  0.2631109493456943,
  1.5950331547363452],
 [-1.1434286616580274,
  -1.0887993241384477,
  0.6133604334972921,
  0.16892232811332422,
  1.4499452241858586],
 [-1.143603618105746,
  -1.0885799593502663,
  0.6133345395780786,
  0.16885872388048503,
  1.4499903139974488],
 [-0.9402529254416035,
  -0.8835285496190161,
  -0.33968460503261555,
  0.4185500458988986,
  1.7449160341943364],
 [-0.8171371054748613,
  -0.7632621421281608,
  -0.6592223994242028,
  0.48451911082131544,
  1.7551025362059092],
 [-1.03438201419925,
  -0.9765770130099684,
  -0.023777014653494848,
  0.3444228300323401,
  1.6903132118303732],
 [-0.9296996342670333,
  -0.8728173418819326,
  -0.3708532369446721,
  0.4254184005876356,
  1.7479518125060025],
 [-0.9985457301919791,
  -0.9414920375205121,
  -0.15408578115192487,
  0.3762115597443861,
  1.7179119891200303],
 [-1.056772858478648,
  -0.9989970877222302,
  0.06789062240725799,
  0.32133476126366856,
  1.6665445625299513],
 [-0.9629918845135634,
  -0.9055005558245325,
  -0.2883784453397462,
  0.4290098361357549,
  1.7278610495420867],
 [-1.0023941676382264,
  -0.9450586546371449,
  -0.1600344929646665,
  0.39963829871634515,
  1.7078490165236926],
 [-1.1543529871714693,
  -1.0996643082618986,
  0.6897983550765097,
  0.16607563474754905,
  1.3981433056093089],
 [-1.08928029385758,
  -1.0310430594672613,
  0.19145084121219588,
  0.31117878677441546,
  1.6176937253382293],
 [-1.1000573407170084,
  -1.0427457994295797,
  0.24931736405037663,
  0.2956854002829216,
  1.5978003758132897],
 [-1.1484332254321408,
  -1.093079354338111,
  0.6068528191332537,
  0.19204912688432166,
  1.442610633752677],
 [-1.11708864278721,
  -1.0595349292164447,
  0.38171937849839555,
  0.2367901249116774,
  1.5581140685935817],
 [-1.0908177953778624,
  -1.0339747204125933,
  0.23031610431564373,
  0.2788644816464958,
  1.6156119298283163],
 [-1.037744704218057,
  -0.9776890408512157,
  -0.06432819484636813,
  0.4072803501929562,
  1.6724815897226846],
 [-1.0783698973836877,
  -1.020517610178597,
  0.16565827007584571,
  0.29596871107236117,
  1.6372605264140778],
 [-0.9355243679752465,
  -0.8766942973344627,
  -0.39300843757396914,
  0.4820362612131983,
  1.72319084167048],
 [-1.034229710240409,
  -0.976927130125775,
  -0.023575918675735105,
  0.3445522281464209,
  1.6901805308954985]]
    
    result = clf.predict(x)
    print(len(result))
    print(result)
    
    
model_df = formatModel()
build_model(model_df)

#print(model_df)

