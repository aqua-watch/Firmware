#include"ArduinoJson.h"#include<EEPROM.h>#include"GravityTDS.h"#include<OneWire.h>#include<ArduinoHttpClient.h>#include<WiFi101.h>#define VOLTAGE 5.00#define OFFSET 0#define LED 13#define ArrayLenth 40#define orpPin 1 int orpArray[ArrayLenth];int orpArrayIndex=0;#define TdsSensorPin 0 GravityTDS gravityTds;float temperature=25,tdsValue=0;#define SensorPin 2#define Offset 0.00#define LED 13#define samplingInterval 20#define printinterval 800#define ArrayLenth 40 int pHArray[ArrayLenth];int pHArrayIndex=0;#define StartConvert 0#define ReadTemperature 1 const byte numReadings=20;byte ECsensorPin=3;byte DS18B20_Pin=4;unsigned int AnalogSampleInterval=25,printInterval=700,tempSampleInterval=850;unsigned int readings[numReadings];byte index=0;unsigned long ECReading=0;unsigned int AnalogAverage=0,averageVoltage=0;unsigned long AnalogSampleTime,printTime,tempSampleTime;float ECcurrent;OneWire ds(DS18B20_Pin);#define turpPin 5 void setup(){Serial.begin(9600);pinMode(LED,OUTPUT);gravityTds.setPin(TdsSensorPin);gravityTds.setAref(5.0);gravityTds.setAdcRange(1024);gravityTds.begin();Serial.begin(115200);for(byte thisReading=0;thisReading<numReadings;thisReading++) readings[thisReading]=0;TempProcess(StartConvert);AnalogSampleTime=millis();printTime=millis();tempSampleTime=millis();float turp=getTurpidity();float cond=getConductivity();float PH=getPH();float ORP=getORP();double TDS=getTDS();Serial.print("Conductivity:");Serial.println(cond);Serial.print("PH:");Serial.println(PH);Serial.print("ORP:");Serial.println(ORP);Serial.print("TDS:");Serial.println(TDS);Serial.print("Turp:");Serial.println(turp);StaticJsonBuffer<200>jsonBuffer;char json[]="{"ORP":"","PH":"","TDS":"","Turbidity":"",:"Conductivity"::""}";JsonObject&root=jsonBuffer.parseObject(json);if(!root.success()){Serial.println("parseObject() failed");return;}else{Serial.println("Parse object worked");} root["ORP"]=ORP;root["PH"]=PH;root["TDS"]=TDS;root["Turbidity"]=turp;root["Conductivity"]=cond;char ssid[]="";char pass[]="";char serverAddress[]="127.0.0.1";int port=5000;WiFiClient wifi;HttpClient client=HttpClient(wifi,serverAddress,port);int status=WL_IDLE_STATUS;String response;int statusCode=0;while(status!=WL_CONNECTED){Serial.print("Attempting to connect to Network named: ");Serial.println(ssid);status=WiFi.begin(ssid,pass);} Serial.print("SSID: ");Serial.println(WiFi.SSID());IPAddress ip=WiFi.localIP();Serial.print("IP Address: ");Serial.println(ip);Serial.println("making POST request");String contentType="application/x-www-form-urlencoded";String postData="name=Alice&age=12";client.post("/",contentType,postData);statusCode=client.responseStatusCode();response=client.responseBody();Serial.print("Status code: ");Serial.println(statusCode);Serial.print("Response: ");Serial.println(response);} void loop(){return;} float getTurpidity(){int sensorValue=analogRead(turpPin);float voltage=sensorValue*(5.0/1024.0);return voltage;} float getConductivity(){AnalogSampleTime=millis();int ECReading=analogRead(ECsensorPin);index=index+1;if(index>=numReadings) index=0;tempSampleTime=millis();temperature=TempProcess(ReadTemperature);TempProcess(StartConvert);printTime=millis();averageVoltage=ECReading*(float)5000/1024;Serial.print("Analog value:");Serial.print(ECReading);Serial.print(" Voltage:");Serial.print(averageVoltage);Serial.print("mV ");Serial.print("temp:");Serial.print(temperature);Serial.print("^C EC:");float TempCoefficient=1.0+0.0185*(temperature-25.0);float CoefficientVolatge=(float)averageVoltage/TempCoefficient;if(CoefficientVolatge<150)Serial.println("No solution!");else if(CoefficientVolatge>3300)Serial.println("Out of the range!");else {if(CoefficientVolatge<=448)ECcurrent=6.84*CoefficientVolatge-64.32;else if(CoefficientVolatge<=1457)ECcurrent=6.98*CoefficientVolatge-127;else ECcurrent=5.3*CoefficientVolatge+2278;ECcurrent/=1000;Serial.print(ECcurrent,2);Serial.println("ms/cm");} return averageVoltage;} float TempProcess(bool ch) {static byte data[12];static byte addr[8];static float TemperatureSum;if(!ch){if(!ds.search(addr)){Serial.println("no more sensors on chain, reset search!");ds.reset_search();return 0;} if(OneWire::crc8(addr,7)!=addr[7]){Serial.println("CRC is not valid!");return 0;} if(addr[0]!=0x10&&addr[0]!=0x28){Serial.print("Device is not recognized!");return 0;} ds.reset();ds.select(addr);ds.write(0x44,1);} else{byte present=ds.reset();ds.select(addr);ds.write(0xBE);for(int i=0;i<9;i++){data[i]=ds.read();} ds.reset_search();byte MSB=data[1];byte LSB=data[0];float tempRead=((MSB<<8)|LSB);TemperatureSum=tempRead/16;} return TemperatureSum;} double getPH(){static unsigned long samplingTime=millis();static unsigned long printTime=millis();static float pHValue,voltage;pHArray[pHArrayIndex++]=analogRead(SensorPin);int PHsensorVal=analogRead(SensorPin);voltage=PHsensorVal*5.0/1024;pHValue=3.5*voltage+Offset;samplingTime=millis();Serial.print("Voltage:");Serial.print(voltage,2);Serial.print(" pH value: ");Serial.println(pHValue,2);digitalWrite(LED,digitalRead(LED)^1);Serial.print(LED);printTime=millis();return pHValue;} double getTDS(){gravityTds.setTemperature(temperature);gravityTds.update();tdsValue=gravityTds.getTdsValue();Serial.print(tdsValue,0);Serial.println("ppm");return tdsValue;} int getORP(){static unsigned long orpTimer=millis();static unsigned long printTime=millis();orpTimer=millis()+20;int ORPData=analogRead(orpPin);if(orpArrayIndex==ArrayLenth){orpArrayIndex=0;} int orpValue=((30*(double)5.0*1000)-(75*ORPData*5.0*1000/1024))/75-OFFSET;return((int)orpValue);} double avergearray(int*arr,int number){int i;int max,min;double avg;long amount=0;if(number<=0){printf("Error number for the array to avraging!/n");return 0;} if(number<5){for(i=0;i<number;i++){amount+=arr[i];} avg=amount/number;return avg;}else{if(arr[0]<arr[1]){min=arr[0];max=arr[1];} else{min=arr[1];max=arr[0];} for(i=2;i<number;i++){if(arr[i]<min){amount+=min;min=arr[i];}else{if(arr[i]>max){amount+=max;max=arr[i];}else{amount+=arr[i];}}} avg=(double)amount/(number-2);} return avg;}
